{
  "import": {
    "prefix": "imp",
    "body": "import ${2:moduleName} from '${1:module}';$0",
    "description": "Imports entire module statement in ES6 syntax"
  },
  "forOf": {
    "prefix": "fof",
    "body": "for (const ${1:item} of ${2:object}) {\n\t${0}\n}",
    "description": "Iterating over property names of iterable objects"
  },
  "forIn": {
    "prefix": "fin",
    "body": "for (const ${1:item} in ${2:object}) {\n\t${0}\n}",
    "description": "Iterating over property values of iterable objects"
  },
  "anonymousFunction": {
    "prefix": "afn",
    "body": "(${1:params}) => {\n\t${2}\n}",
    "description": "Creates an anonymous function in ES6 syntax"
  },
  "namedFunction": {
    "prefix": "fn",
    "body": "const ${1:name} = (${2:params}) => {\n\t${3}\n}",
    "description": "Creates a named function in ES6 syntax"
  },
  "setInterval": {
    "prefix": "sti",
    "body": "setInterval(() => {\n\t${2}\n}, ${0:intervalInms});",
    "description": "Executes the given function at specified intervals in ES6 syntax"
  },
  "setTimeOut": {
    "prefix": "sto",
    "body": "setTimeout(() => {\n\t${2}\n}, ${1:delayInms});",
    "description": "Executes the given function after the specified delay in ES6 syntax"
  },
  "promise": {
    "prefix": "prom",
    "body": "return new Promise((resolve, reject) => {\n\t${1}\n});",
    "description": "Creates and returns a new Promise in the standard ES6 syntax"
  },
  "then": {
    "prefix": "then",
    "body": ".then((res) => {\n\t${1}\n});",
    "description": "Add the .then method to handle promises"
  },
  "thenErr": {
    "prefix": "thenerr",
    "body": ".then((res) => {\n\t${1}\n}, (error) => {\n\t${2}\n});",
    "description": "Add the .then and error method to handle promises"
  },
  "catch": {
    "prefix": "catch",
    "body": ".catch((error) => {\n\t${1}\n});",
    "description": "Add the .catch method to handle promises"
  },
  "finally": {
    "prefix": "finally",
    "body": ".finally(() => {\n\t${1}\n});",
    "description": "Add the .finally method to handle promises"
  },
  "consoleLog": {
    "prefix": "cl",
    "body": "console.log(${1:object});",
    "description": "Displays a message in the console"
  },
	"arrayMap": {
		"prefix": "map",
		"body": "${1:array}.map(item => $0);",
		"description": "Create array map method"
	},
	"arrayFind": {
		"prefix": "find",
		"body": "${1:array}.find(item => $0);",
		"description": "Create array find method"
	},
	"arrayFilter": {
		"prefix": "filter",
		"body": "${1:array}.filter(item => $0);",
		"description": "Create array filter method"
	},
	"arrayReduce": {
		"prefix": "reduce",
		"body": "${1:array}.reduce(item => $0);",
		"description": "Create array reduce method"
	},
	"deepCopy": {
		"prefix": "deepCopy",
		"body": "const ${1:newObject} = JSON.parse(JSON.stringify(${2:oldObject}));",
		"description": "Create a deep copy of an object"
	},
  "vuexStoreState": {
		"prefix": "vstate",
		"body": "this.\\$store.state.${1:prop};",
		"description": "Vuex store state"
	},
  "vuexStoreCommit": {
		"prefix": "vcom",
		"body": "this.\\$store.commit.${1};",
		"description": "Vuex store commit"
	}
}
